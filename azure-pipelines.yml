trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'  # Nombre de la conexión de servicio de Azure
  functionAppName: 'iothubandroid'  # Nombre de tu Function App
  resourceGroup: 'iothost'  # Grupo de recursos de tu Function App
  buildConfig: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish_output'
  zipPath: '$(Build.ArtifactStagingDirectory)/app.zip'

steps:
- task: UseDotNet@2
  displayName: 'Check SDK .NET 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'  # Asegura que se use el SDK .NET 8.0 para la compilación

- task: DotNetCoreCLI@2
  displayName: 'Complete Restore process'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Complete Build process'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig)'

- task: DotNetCoreCLI@2
  displayName: 'Complete Publish process'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --output $(outputDir)'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Archivar los archivos publicados en un archivo ZIP'
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipPath)'
    replaceExistingArchive: true

- task: PowerShell@2
  displayName: 'Verificar contenido del archivo ZIP antes del despliegue'
  inputs:
    targetType: 'inline'
    script: |
      $zipPath = "$(Build.ArtifactStagingDirectory)/app.zip"
      if (Test-Path $zipPath) {
          Write-Host "Archivo ZIP encontrado: $zipPath"
          $sizeMB = [Math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "Tamaño del ZIP: $sizeMB MB"
          Write-Host "Contenido del archivo ZIP:"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::OpenRead($zipPath).Entries | ForEach-Object {
              Write-Host " - $($_.FullName)"
          }
      } else {
          Write-Host "Archivo ZIP no encontrado en $zipPath"
          throw "El archivo ZIP para despliegue no existe."
      }

- task: AzureCLI@2
  displayName: 'Listar y detener la Function App destino'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "Listando todas las Function Apps en el grupo de recursos"
      $functionApps = az functionapp function list --name iothubandroid --resource-group iothost --output table
      Write-Host "Imprimiendo todas las Function Apps en el grupo de recursos"
      Write-Host $functionApps
      Write-Host "Deteniendo la Function App objetivo: $(functionAppName)"
      $stopOutput = az functionapp stop --name $(functionAppName) --resource-group $(resourceGroup)
      Write-Host "Salida de detener Function App:"
      Write-Host $stopOutput

- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    isFlexConsumption: true
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/app.zip'
    deploymentMethod: auto

- task: AzureCLI@2
  displayName: 'Iniciar la Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "Iniciando la Function App objetivo: $(functionAppName)..."
      $startOutput = az functionapp start --name $(functionAppName) --resource-group $(resourceGroup)
      Write-Host "Imprimiendo la Salida de iniciar Funtion App"
      Write-Host $startOutput