trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Publish project'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/output --no-build'
    zipAfterPublish: false
    modifyOutputPath: false

# Crear ZIP usando la tarea oficial (más confiable que PowerShell)
- task: ArchiveFiles@2
  displayName: 'Create deployment package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/output'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
    replaceExistingArchive: true

# Verificación simple sin try-catch complejo
- task: PowerShell@2
  displayName: 'Verify package'
  inputs:
    targetType: 'inline'
    errorActionPreference: 'continue'
    script: |
      $zipPath = "$(Build.ArtifactStagingDirectory)/app.zip"
      if (Test-Path $zipPath) {
          $sizeMB = [Math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "ZIP file created successfully: $sizeMB MB"
          if ($sizeMB -gt 250) {
              Write-Warning "ZIP file is large: $sizeMB MB"
          }
      } else {
          Write-Error "ZIP file not found!"
          exit 1
      }

# Limpiar configuraciones problemáticas
- task: AzureCLI@2
  displayName: 'Prepare Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Setting up Function App configuration..."
      az functionapp config appsettings set \
        --name $(functionAppName) \
        --resource-group $(resourceGroup) \
        --settings WEBSITE_RUN_FROM_PACKAGE=0 \
                  SCM_DO_BUILD_DURING_DEPLOYMENT=false

# Deploy simple y directo
- task: AzureCLI@2
  displayName: 'Deploy Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Starting deployment..."
      
      az functionapp deployment source config-zip \
        --resource-group $(resourceGroup) \
        --name $(functionAppName) \
        --src "$(Build.ArtifactStagingDirectory)/app.zip" \
        --timeout 600
      
      echo "Deployment completed"
      
      # Verificar estado
      az functionapp show \
        --name $(functionAppName) \
        --resource-group $(resourceGroup) \
        --query "state" \
        --output tsv
