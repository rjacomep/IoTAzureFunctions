trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Instalar Azure Functions Core Tools (igual que tienes local)
- task: FuncToolsInstaller@0
  displayName: 'Install Azure Functions Core Tools'
  inputs:
    version: 'latest'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# Usar func tools para hacer el package (como haces localmente)
- task: PowerShell@2
  displayName: 'Package using Azure Functions Core Tools'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "=== Building Azure Function package ==="
      
      # Navegar al directorio del proyecto (asumiendo que .csproj está en la raíz)
      $projectPath = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.csproj" -Recurse | Select-Object -First 1
      $projectDir = $projectPath.DirectoryName
      
      Write-Host "Project directory: $projectDir"
      Set-Location $projectDir
      
      # Usar func tools para crear el package (igual que localmente)
      Write-Host "Creating deployment package..."
      func pack --build-native-deps --output "$(Build.ArtifactStagingDirectory)/function-app.zip"
      
      # Verificar que se creó el ZIP
      $zipPath = "$(Build.ArtifactStagingDirectory)/function-app.zip"
      if (Test-Path $zipPath) {
          $sizeMB = [Math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "✓ Package created successfully: $sizeMB MB"
      } else {
          throw "Package creation failed"
      }

# Deploy el ZIP generado por func tools
- task: AzureCLI@2
  displayName: 'Deploy Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $zipPath = "$(Build.ArtifactStagingDirectory)/function-app.zip"
      
      Write-Host "Deploying Function App package..."
      Write-Host "ZIP path: $zipPath"
      
      # Deploy usando el mismo método que func tools usa internamente
      az functionapp deployment source config-zip `
          --resource-group $(resourceGroup) `
          --name $(functionAppName) `
          --src $zipPath `
          --build-remote false `
          --timeout 600
      
      # Verificar el estado
      Write-Host "Checking deployment status..."
      $status = az functionapp show --name $(functionAppName) --resource-group $(resourceGroup) --query "state" -o tsv
      Write-Host "Function App status: $status"
      
      # Listar las funciones para verificar que se cargaron
      Write-Host "Listing deployed functions..."
      az functionapp function list --name $(functionAppName) --resource-group $(resourceGroup) --output table
