trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Limpieza inicial con manejo de errores según [3][4]
- task: PowerShell@2
  displayName: 'Initial cleanup (.NET 8 migration fix)'
  inputs:
    targetType: 'inline'
    errorActionPreference: 'stop'
    failOnStderr: false  # Según [4], no confiar en failOnStderr
    script: |
      try {
          Write-Host "=== Limpieza inicial para migración .NET 8 ==="
          
          # Eliminar bin si existe
          if (Test-Path "bin") { 
              Write-Host "Eliminando carpeta bin..."
              Remove-Item "bin" -Recurse -Force -ErrorAction SilentlyContinue
              if ($?) { Write-Host "✓ Carpeta bin eliminada" }
          }
          
          # Eliminar obj si existe  
          if (Test-Path "obj") { 
              Write-Host "Eliminando carpeta obj..."
              Remove-Item "obj" -Recurse -Force -ErrorAction SilentlyContinue
              if ($?) { Write-Host "✓ Carpeta obj eliminada" }
          }
          
          Write-Host "✓ Limpieza inicial completada exitosamente"
          exit 0  # Según [1][4], usar exit 0 explícitamente
          
      } catch {
          Write-Host "##vso[task.logissue type=error]Error en limpieza inicial: $($_.Exception.Message)"
          Write-Host "##vso[task.logissue type=error]StackTrace: $($_.ScriptStackTrace)"
          exit 1
      }

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# Fix de WorkerExtensions con manejo robusto de errores según [3][4]
- task: PowerShell@2
  displayName: 'WorkerExtensions fix with proper error handling'
  inputs:
    targetType: 'inline'
    errorActionPreference: 'stop'
    failOnStderr: false  # Según [4]
    script: |
      try {
          Write-Host "=== Aplicando fix oficial para WorkerExtensions.csproj ==="
          
          # Definir rutas posibles para WorkerExtensions según [2]
          $possiblePaths = @(
              "obj\Release\net8.0\WorkerExtensions\WorkerExtensions.csproj",
              "obj\$(buildConfig)\net8.0\WorkerExtensions\WorkerExtensions.csproj",
              "AzureFunctions\obj\Release\net8.0\WorkerExtensions\WorkerExtensions.csproj"
          )
          
          $foundFiles = $false
          
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  Write-Host "✓ Encontrado WorkerExtensions.csproj en: $path"
                  Remove-Item $path -Force -ErrorAction SilentlyContinue
                  if ($?) {
                      Write-Host "✓ WorkerExtensions.csproj eliminado exitosamente"
                      $foundFiles = $true
                  } else {
                      Write-Host "⚠️ No se pudo eliminar: $path"
                  }
              }
          }
          
          if (-not $foundFiles) {
              Write-Host "ℹ️ No se encontró WorkerExtensions.csproj (esto puede estar bien)"
          }
          
          # Buscar y eliminar referencias a .NET 6.0 según [2]
          $net6Items = Get-ChildItem -Path "obj" -Name "*net6.0*" -Recurse -ErrorAction SilentlyContinue
          if ($net6Items) {
              foreach ($item in $net6Items) {
                  Write-Host "Eliminando referencia .NET 6.0: $($item.FullName)"
                  Remove-Item $item.FullName -Recurse -Force -ErrorAction SilentlyContinue
              }
          }
          
          Write-Host "✓ Fix de WorkerExtensions completado exitosamente"
          exit 0  # Según [1][4]
          
      } catch {
          Write-Host "##vso[task.logissue type=error]Error en WorkerExtensions fix: $($_.Exception.Message)"
          Write-Host "##vso[task.logissue type=error]StackTrace: $($_.ScriptStackTrace)"
          exit 1
      }

- task: DotNetCoreCLI@2
  displayName: 'Publish after WorkerExtensions cleanup'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Create deployment package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    replaceExistingArchive: true

- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    runtimeStack: 'DOTNET-ISOLATED|8.0'
    deploymentMethod: 'zipDeploy'

# Configuración post-deployment según [5]
- task: AzureCLI@2
  displayName: 'Configure .NET 8 settings and restart'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "Configurando settings para .NET 8 isolated..."
      
      # Según [5], remover WEBSITE_RUN_FROM_PACKAGE puede ser necesario
      az functionapp config appsettings delete `
        --name $(functionAppName) `
        --resource-group $(resourceGroup) `
        --setting-names WEBSITE_RUN_FROM_PACKAGE
      
      # Configurar settings correctos para .NET 8 isolated según [5]
      az functionapp config appsettings set `
        --name $(functionAppName) `
        --resource-group $(resourceGroup) `
        --settings FUNCTIONS_WORKER_RUNTIME=dotnet-isolated `
                  FUNCTIONS_EXTENSION_VERSION=~4
      
      # Reiniciar para aplicar cambios según [5]
      az functionapp restart --name $(functionAppName) --resource-group $(resourceGroup)
      
      Write-Host "✓ Configuración completada"
