trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Limpieza inicial según [1]
- task: PowerShell@2
  displayName: 'Initial cleanup (.NET 8 migration fix)'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Limpieza inicial para migración .NET 8..."
      # Eliminar completamente bin y obj para evitar referencias a .NET 6
      if (Test-Path "bin") { 
          Write-Host "Eliminando carpeta bin..."
          Remove-Item "bin" -Recurse -Force 
      }
      if (Test-Path "obj") { 
          Write-Host "Eliminando carpeta obj..."
          Remove-Item "obj" -Recurse -Force 
      }

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# CRÍTICO: Eliminar WorkerExtensions.csproj después del build según [1]
- task: PowerShell@2
  displayName: 'Delete problematic WorkerExtensions.csproj (Official hack from [1])'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "=== Aplicando fix oficial para WorkerExtensions.csproj ==="
      
      # Buscar y eliminar WorkerExtensions.csproj problemático según [1]
      $workerExtensionsPath = "obj\Release\net8.0\WorkerExtensions\WorkerExtensions.csproj"
      if (Test-Path $workerExtensionsPath) {
          Write-Host "✓ Encontrado WorkerExtensions.csproj problemático: $workerExtensionsPath"
          Remove-Item $workerExtensionsPath -Force
          Write-Host "✓ WorkerExtensions.csproj eliminado exitosamente"
      } else {
          Write-Host "WorkerExtensions.csproj no encontrado (esto está bien)"
      }
      
      # Eliminar cualquier referencia a .NET 6.0 según [1]
      $net6Paths = Get-ChildItem -Path "obj" -Name "*net6.0*" -Recurse -ErrorAction SilentlyContinue
      foreach ($path in $net6Paths) {
          Write-Host "Eliminando referencia .NET 6.0: $($path.FullName)"
          Remove-Item $path.FullName -Recurse -Force -ErrorAction SilentlyContinue
      }
      
      Write-Host "=== Fix de WorkerExtensions completado ==="

- task: DotNetCoreCLI@2
  displayName: 'Publish after WorkerExtensions cleanup'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Create deployment package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    replaceExistingArchive: true

- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    runtimeStack: 'DOTNET-ISOLATED|8.0'
    deploymentMethod: 'zipDeploy'
