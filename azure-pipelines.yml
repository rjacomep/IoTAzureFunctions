trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Limpiar archivos problemáticos antes de build
- task: PowerShell@2
  displayName: 'Clean problematic files (.NET 8 fix)'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Limpiando archivos problemáticos de .NET 8..."
      # Eliminar carpetas obj y bin que pueden tener referencias a .NET 6
      if (Test-Path "obj") { Remove-Item "obj" -Recurse -Force }
      if (Test-Path "bin") { Remove-Item "bin" -Recurse -Force }
      
      # Eliminar cualquier WorkerExtensions generado automáticamente
      Get-ChildItem -Path . -Name "WorkerExtensions*" -Recurse | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# Limpiar archivos problemáticos después de build (fix para .NET 8)
- task: PowerShell@2
  displayName: 'Clean post-build (.NET 8 fix)'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Limpiando archivos post-build problemáticos..."
      # Eliminar WorkerExtensions.csproj problemático mencionado en [7]
      Get-ChildItem -Path "obj" -Name "WorkerExtensions.csproj" -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force
      Get-ChildItem -Path "obj" -Name "*net6.0*" -Recurse -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force

- task: DotNetCoreCLI@2
  displayName: 'Publish for .NET 8 isolated'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Create deployment package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    replaceExistingArchive: true

- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    runtimeStack: 'DOTNET-ISOLATED|8.0'
    deploymentMethod: 'zipDeploy'
