trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'  # Your service connection name
  functionAppName: 'iothubandroid'                   # Your Azure Function App name
  resourceGroup: 'iothost'                   # <--- Agrega el nombre de tu resource group aquí
  buildConfig: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish_output'
  zipPath: '$(Build.ArtifactStagingDirectory)/app.zip'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'  # This ensures the .NET SDK 8.0 is used for your build
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --output $(outputDir)'
    zipAfterPublish: false

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipPath)'
    replaceExistingArchive: true
  displayName: 'Archive the Published Files into ZIP'

- task: PowerShell@2
  displayName: 'Verificar contenido del archivo ZIP antes del despliegue'
  inputs:
    targetType: 'inline'
    script: |
      $zipPath = "$(Build.ArtifactStagingDirectory)/app.zip"
      
      if (Test-Path $zipPath) {
          Write-Host "Archivo ZIP encontrado: $zipPath"

          # Tamaño del archivo
          $sizeMB = [Math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "Tamaño del ZIP: $sizeMB MB"

          # Contenido del ZIP
          Write-Host "Contenido del archivo ZIP:"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::OpenRead($zipPath).Entries | ForEach-Object {
              Write-Host " - $($_.FullName)"
          }
      } else {
          Write-Host "Archivo ZIP no encontrado en $zipPath"
          throw "El archivo ZIP para despliegue no existe."
      }

- task: AzureCLI@2
  displayName: 'List and Stop Target Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "Listando todas las Function Apps en el grupo de recursos"
      az functionapp function list --name iothubandroid --resource-group iothost --output table

      Write-Host "Deteniendo únicamente la Function App objetivo: $(functionAppName)"
      az functionapp stop --name $(functionAppName) --resource-group $(resourceGroup)

- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: 'AzureConnection-UAMI'
    appType: 'functionApp'
    isFlexConsumption: true
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/app.zip'
    deploymentMethod: auto

- task: AzureCLI@2
  displayName: 'Start Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "Listando Function Apps actuales en el grupo de recursos: $(resourceGroup)..."
      az functionapp function list --name iothubandroid --resource-group iothost --output table

      Write-Host "Iniciando únicamente la Function App objetivo: $(functionAppName)..."
      az functionapp start --name $(functionAppName) --resource-group $(resourceGroup)