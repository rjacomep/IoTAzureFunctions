trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

- task: PowerShell@2
  displayName: 'Initial cleanup with null checks'
  inputs:
    targetType: 'inline'
    errorActionPreference: 'stop'
    failOnStderr: false
    script: |
      try {
          Write-Host "=== Limpieza inicial para migración .NET 8 ==="
          
          # Verificar y eliminar bin con verificación null según [1][6]
          $binPath = "bin"
          if ((Test-Path $binPath) -and ($binPath -ne $null) -and ($binPath -ne "")) { 
              Write-Host "Eliminando carpeta bin: $binPath"
              Remove-Item $binPath -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "✓ Carpeta bin eliminada"
          } else {
              Write-Host "ℹ️ Carpeta bin no existe o path es null"
          }
          
          # Verificar y eliminar obj con verificación null según [1][6]
          $objPath = "obj"
          if ((Test-Path $objPath) -and ($objPath -ne $null) -and ($objPath -ne "")) { 
              Write-Host "Eliminando carpeta obj: $objPath"
              Remove-Item $objPath -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "✓ Carpeta obj eliminada"
          } else {
              Write-Host "ℹ️ Carpeta obj no existe o path es null"
          }
          
          Write-Host "✓ Limpieza inicial completada exitosamente"
          exit 0
          
      } catch {
          Write-Host "##vso[task.logissue type=error]Error en limpieza inicial: $($_.Exception.Message)"
          exit 1
      }

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# Fix de WorkerExtensions con verificación completa de null según [1][2][6]
- task: PowerShell@2
  displayName: 'WorkerExtensions fix with null-safe operations'
  inputs:
    targetType: 'inline'
    errorActionPreference: 'stop'
    failOnStderr: false
    script: |
      try {
          Write-Host "=== Fix de WorkerExtensions con verificaciones null ==="
          
          # Definir rutas con verificación null según [4]
          $possiblePaths = @(
              "obj\Release\net8.0\WorkerExtensions\WorkerExtensions.csproj",
              "obj\$(buildConfig)\net8.0\WorkerExtensions\WorkerExtensions.csproj"
          )
          
          $filesDeleted = 0
          
          foreach ($path in $possiblePaths) {
              # Verificación null completa según [1][6]
              if (($path -ne $null) -and ($path -ne "") -and (Test-Path $path)) {
                  Write-Host "✓ Encontrado WorkerExtensions.csproj en: $path"
                  try {
                      Remove-Item $path -Force -ErrorAction Stop
                      Write-Host "✓ WorkerExtensions.csproj eliminado: $path"
                      $filesDeleted++
                  } catch {
                      Write-Host "⚠️ No se pudo eliminar: $path - Error: $($_.Exception.Message)"
                  }
              } else {
                  Write-Host "ℹ️ Path no válido o no existe: $path"
              }
          }
          
          # Buscar referencias .NET 6.0 con verificación null según [2][4]
          $objDir = "obj"
          if (($objDir -ne $null) -and (Test-Path $objDir)) {
              Write-Host "Buscando referencias .NET 6.0 en: $objDir"
              
              $net6Items = Get-ChildItem -Path $objDir -Name "*net6.0*" -Recurse -ErrorAction SilentlyContinue
              
              if ($net6Items -ne $null) {
                  foreach ($item in $net6Items) {
                      if (($item -ne $null) -and ($item.FullName -ne $null) -and ($item.FullName -ne "")) {
                          Write-Host "Eliminando referencia .NET 6.0: $($item.FullName)"
                          try {
                              Remove-Item $item.FullName -Recurse -Force -ErrorAction Stop
                              $filesDeleted++
                          } catch {
                              Write-Host "⚠️ No se pudo eliminar .NET 6.0 ref: $($item.FullName)"
                          }
                      }
                  }
              } else {
                  Write-Host "ℹ️ No se encontraron referencias .NET 6.0"
              }
          }
          
          Write-Host "✓ Fix completado. Archivos eliminados: $filesDeleted"
          exit 0
          
      } catch {
          Write-Host "##vso[task.logissue type=error]Error en WorkerExtensions fix: $($_.Exception.Message)"
          Write-Host "##vso[task.logissue type=error]StackTrace: $($_.ScriptStackTrace)"
          exit 1
      }

- task: DotNetCoreCLI@2
  displayName: 'Publish after cleanup'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Create deployment package'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    replaceExistingArchive: true

- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(Build.ArtifactStagingDirectory)/function-app.zip'
    runtimeStack: 'DOTNET-ISOLATED|8.0'
    deploymentMethod: 'zipDeploy'
