trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --no-restore'

# Usar la estructura oficial según documentación [5]
- task: DotNetCoreCLI@2
  displayName: 'Publish project'
  inputs:
    command: 'publish'
    projects: '*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfig) --output publish_output'
    modifyOutputPath: false
    zipAfterPublish: false

# Crear archivo usando la estructura oficial [5]
- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
    includeRootFolder: false
    archiveFile: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
    replaceExistingArchive: true

# Publicar como artefacto (paso crítico según documentación [5])
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
    artifactName: 'drop'

# Deploy usando la configuración oficial [1][3]
- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'  # Usar connectedServiceNameARM según [1]
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'  # Ruta específica
    runtimeStack: 'DOTNET-ISOLATED|8.0'  # Específico para .NET 8 isolated según [3]
    deploymentMethod: 'zipDeploy'
