trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish_output'
  zipPath: '$(Build.ArtifactStagingDirectory)/app.zip'

steps:
- task: UseDotNet@2
  displayName: 'Check SDK .NET 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

- task: DotNetCoreCLI@2
  displayName: 'Complete Restore process'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Complete Build process'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig)'

- task: DotNetCoreCLI@2
  displayName: 'Complete Publish process'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --output $(outputDir)'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Archivar los archivos publicados en un archivo ZIP'
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipPath)'
    replaceExistingArchive: true

# DESPLIEGUE MÍNIMO - SIN CONFIGURACIONES EXTRA
- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(zipPath)'

# DIAGNÓSTICO POST-DESPLIEGUE
- task: AzureCLI@2
  displayName: 'Diagnóstico Post-Despliegue'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "=== DIAGNÓSTICO POST-DESPLIEGUE ==="
      
      Write-Host "1. Estado de la Function App:"
      az functionapp show --name $(functionAppName) --resource-group $(resourceGroup) --query "{name:name, state:state, defaultHostName:defaultHostName, kind:kind}" --output table
      
      Write-Host "`n2. Listando funciones desplegadas:"
      $functions = az functionapp function list --name $(functionAppName) --resource-group $(resourceGroup) --output table
      if ($functions) {
          Write-Host $functions
      } else {
          Write-Host "No se encontraron funciones desplegadas"
      }
      
      Write-Host "`n3. Configuración de runtime:"
      az functionapp config show --name $(functionAppName) --resource-group $(resourceGroup) --query "{netFrameworkVersion:netFrameworkVersion, linuxFxVersion:linuxFxVersion, windowsFxVersion:windowsFxVersion}" --output table
      
      Write-Host "`n4. Variables de aplicación relevantes:"
      $appSettings = az functionapp config appsettings list --name $(functionAppName) --resource-group $(resourceGroup) --query "[?name=='FUNCTIONS_EXTENSION_VERSION' || name=='FUNCTIONS_WORKER_RUNTIME' || name=='WEBSITE_RUN_FROM_PACKAGE'].{name:name, value:value}" --output table
      Write-Host $appSettings
      
      Write-Host "`n5. Logs recientes de la aplicación:"
      $logs = az functionapp log tail --name $(functionAppName) --resource-group $(resourceGroup) --timeout 30
      if ($logs) {
          Write-Host $logs
      } else {
          Write-Host "No se pudieron obtener logs recientes"
      }
      
      Write-Host "`n=== FIN DIAGNÓSTICO ==="