trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'AzureConnection-UAMI'
  functionAppName: 'iothubandroid'
  resourceGroup: 'iothost'
  buildConfig: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish_output'
  zipPath: '$(Build.ArtifactStagingDirectory)/app.zip'

steps:
- task: UseDotNet@2
  displayName: 'Check SDK .NET 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

- task: DotNetCoreCLI@2
  displayName: 'Complete Restore process'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Complete Build process'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig)'

- task: DotNetCoreCLI@2
  displayName: 'Complete Publish process'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfig) --output $(outputDir)'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  displayName: 'Archivar los archivos publicados en un archivo ZIP'
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipPath)'
    replaceExistingArchive: true

# VERIFICACIÓN DETALLADA DEL ZIP
- task: PowerShell@2
  displayName: 'Verificar contenido detallado del ZIP'
  inputs:
    targetType: 'inline'
    script: |
      $zipPath = "$(Build.ArtifactStagingDirectory)/app.zip"
      if (Test-Path $zipPath) {
          Write-Host "=== VERIFICACIÓN DEL ZIP ==="
          Write-Host "Archivo ZIP encontrado: $zipPath"
          $sizeMB = [Math]::Round((Get-Item $zipPath).Length / 1MB, 2)
          Write-Host "Tamaño del ZIP: $sizeMB MB"
          
          Write-Host "`nContenido completo del archivo ZIP:"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
          $zip.Entries | ForEach-Object {
              $size = [Math]::Round($_.Length / 1KB, 2)
              Write-Host " - $($_.FullName) ($size KB)"
          }
          $zip.Dispose()
          
          Write-Host "`nBuscando archivos críticos:"
          $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
          $hostJson = $zip.Entries | Where-Object { $_.Name -eq "host.json" }
          $dllFiles = $zip.Entries | Where-Object { $_.Name -like "*.dll" }
          $funcJson = $zip.Entries | Where-Object { $_.Name -eq "function.json" }
          
          if ($hostJson) { Write-Host "✓ host.json encontrado" } else { Write-Host "✗ host.json NO encontrado" }
          if ($dllFiles.Count -gt 0) { Write-Host "✓ $($dllFiles.Count) archivos .dll encontrados" } else { Write-Host "✗ No se encontraron archivos .dll" }
          if ($funcJson) { Write-Host "✓ function.json encontrado" } else { Write-Host "✗ function.json NO encontrado" }
          
          $zip.Dispose()
          Write-Host "=== FIN VERIFICACIÓN ZIP ==="
      } else {
          throw "El archivo ZIP para despliegue no existe."
      }

# DESPLIEGUE MÍNIMO - SIN CONFIGURACIONES EXTRA
- task: AzureFunctionApp@2
  displayName: 'Deploy Azure Function App'
  inputs:
    connectedServiceNameARM: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(zipPath)'

# DIAGNÓSTICO POST-DESPLIEGUE
- task: AzureCLI@2
  displayName: 'Diagnóstico Post-Despliegue'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "=== DIAGNÓSTICO POST-DESPLIEGUE ==="
      
      Write-Host "1. Estado de la Function App:"
      az functionapp show --name $(functionAppName) --resource-group $(resourceGroup) --query "{name:name, state:state, defaultHostName:defaultHostName, kind:kind}" --output table
      
      Write-Host "`n2. Listando funciones desplegadas:"
      $functions = az functionapp function list --name $(functionAppName) --resource-group $(resourceGroup) --output table
      if ($functions) {
          Write-Host $functions
      } else {
          Write-Host "No se encontraron funciones desplegadas"
      }
      
      Write-Host "`n3. Configuración de runtime:"
      az functionapp config show --name $(functionAppName) --resource-group $(resourceGroup) --query "{netFrameworkVersion:netFrameworkVersion, linuxFxVersion:linuxFxVersion, windowsFxVersion:windowsFxVersion}" --output table
      
      Write-Host "`n4. Variables de aplicación relevantes:"
      $appSettings = az functionapp config appsettings list --name $(functionAppName) --resource-group $(resourceGroup) --query "[?name=='FUNCTIONS_EXTENSION_VERSION' || name=='FUNCTIONS_WORKER_RUNTIME' || name=='WEBSITE_RUN_FROM_PACKAGE'].{name:name, value:value}" --output table
      Write-Host $appSettings
      
      Write-Host "`n5. Logs recientes de la aplicación:"
      $logs = az functionapp log tail --name $(functionAppName) --resource-group $(resourceGroup) --timeout 30
      if ($logs) {
          Write-Host $logs
      } else {
          Write-Host "No se pudieron obtener logs recientes"
      }
      
      Write-Host "`n=== FIN DIAGNÓSTICO ==="